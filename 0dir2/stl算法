
- **排序算法**
排序算法包括：`sort()`、 `stable_sort()`、 `partial_sort()`、 `nth_element()`、 `merge()`、 `inplace_merge()`、 `heap_sort()`、 `push_heap()` 和 `pop_heap()`。
`sort()`：对序列进行排序。
`stable_sort()`：与 `sort()` 类似，但不保证排序的稳定性。
`partial_sort()`：从序列的开头开始，只排序序列的前 `n` 个元素。
`nth_element()`：将序列中第 `n` 大的元素移到序列的末尾。
`merge()`：将两个有序序列合并为一个有序序列。
`inplace_merge()`：将两个有序序列合并为一个有序序列，并修改第一个序列。
`heap_sort()`：使用堆排序算法对序列进行排序。
`push_heap()`：将一个元素添加到最大堆中。
`pop_heap()`：从最大堆中删除最大元素。
- **搜索算法**
C++ 标准模板库 (STL) 包含许多用于处理容器和算法的模板。以下是一些常用的搜索算法：

- **find()** - 返回容器中与指定值相等的第一个元素的迭代器。
- **find_if()** - 返回满足指定条件的第一个元素的迭代器。
- **find_if_not()** - 返回不满足指定条件的第一个元素的迭代器。
- **lower_bound()** - 返回容器中与指定值相等或大于该值的第一个元素的迭代器。
- **upper_bound()** - 返回容器中与指定值相等或小于该值的第一个元素的迭代器。
- **equal_range()** - 返回一个pair，其中first是lower_bound()返回的迭代器，second是upper_bound()返回的迭代器。
- **binary_search()** - 判断容器是否包含指定值。

以下是一个使用这些算法的示例：

```c++
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
  std::vector<int> v = {1, 2, 3, 4, 5};

  // 使用 find() 函数查找值 3
  auto it = std::find(v.begin(), v.end(), 3);
  if (it!= v.end()) {
    std::cout << "Found " << *it << std::endl;
  } else {
    std::cout << "Not found" << std::endl;
  }

  // 使用 find_if() 函数查找值大于 2
  it = std::find_if(v.begin(), v.end(), [](int x) { return x > 2; });
  if (it!= v.end()) {
    std::cout << "Found " << *it << std::endl;
  } else {
    std::cout << "Not found" << std::endl;
  }

  // 使用 find_if_not() 函数查找值小于 3
  it = std::find_if_not(v.begin(), v.end(), [](int x) { return x < 3; });
  if (it!= v.end()) {
    std::cout << "Found " << *it << std::endl;
  } else {
    std::cout << "Not found" << std::endl;
  }

  // 使用 lower_bound() 函数查找值 3 及其之后的元素
  it = std::lower_bound(v.begin(), v.end(), 3);
  if (it!= v.end()) {
    std::cout << "Found " << *it << std::endl;
  } else {
    std::cout << "Not found" << std::endl;
  }

  // 使用 upper_bound() 函数查找值 3 及其之前的元素
  it = std::upper_bound(v.begin(), v.end(), 3);
  if (it!= v.begin()) {
    std::cout << "Found " << *(--it) << std::endl;
  } else {
    std::cout << "Not found" << std::endl;
  }

  // 使用 equal_range() 函数查找值 3
  std::pair<std::vector<int>::iterator, std::vector<int>::iterator> range =
      std::equal_range(v.begin(), v.end(), 3);
  if (range.first!= range.second) {
    std::cout << "Found " << *range.first << " and " << *(range.second - 1)
              << std::endl;
  } else {
    std::cout << "Not found" << std::endl;
  }

  // 使用 binary_search() 函数判断值 6 是否在容器中
  if (std::binary_search(v.begin(), v.end(), 6)) {
    std::cout << "Found" << std::endl;
  } else {
    std::cout << "Not found" << std::endl;
  }

  return 0;
}
```
- **修改算法**
修改算法包括：`remove()`、 `erase()`、 `unique()`、 `reverse()` 和 `reverse_copy()`。
C++ 标准模板库 (STL) 包含许多用于处理容器和算法的模板。以下是一些常用的修改算法：

- **for_each()** - 对容器中的每个元素执行一个函数。
- **replace()** - 在容器中替换指定值。
- **remove()** - 从容器中删除指定值。
- **remove_if()** - 从容器中删除满足指定条件的元素。
- **reverse()** - 反转容器中的元素。
- **sort()** - 对容器中的元素进行排序。
- **stable_sort()** - 对容器中的元素进行稳定排序。
- **shuffle()** - 随机打乱容器中的元素的顺序。

以下是一个使用这些算法的示例：

```c++
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
  std::vector<int> v = {1, 2, 3, 4, 5};

  // 使用 for_each() 函数遍历容器并输出每个元素
  std::for_each(v.begin(), v.end(), [](int x) { std::cout << x << " "; });
  std::cout << std::endl;

  // 使用 replace() 函数将所有值 3 替换为 10
  std::replace(v.begin(), v.end(), 3, 10);
  std::for_each(v.begin(), v.end(), [](int x) { std::cout << x << " "; });
  std::cout << std::endl;

  // 使用 remove() 函数删除所有值 4
  std::remove(v.begin(), v.end(), 4);
  std::for_each(v.begin(), v.end(), [](int x) { std::cout << x << " "; });
  std::cout << std::endl;

  // 使用 remove_if() 函数删除所有值小于 3 的元素
  std::remove_if(v.begin(), v.end(), [](int x) { return x < 3; });
  std::for_each(v.begin(), v.end(), [](int x) { std::cout << x << " "; });
  std::cout << std::endl;

  // 使用 reverse() 函数反转容器中的元素
  std::reverse(v.begin(), v.end());
  std::for_each(v.begin(), v.end(), [](int x) { std::cout << x << " "; });
  std::cout << std::endl;

  // 使用 sort() 函数对容器中的元素进行排序
  std::sort(v.begin(), v.end());
  std::for_each(v.begin(), v.end(), [](int x) { std::cout << x << " "; });
  std::cout << std::endl;

  // 使用 stable_sort() 函数对容器中的元素进行稳定排序
  std::stable_sort(v.begin(), v.end());
  std::for_each(v.begin(), v.end(), [](int x) { std::cout << x << " "; });
  std::cout << std::endl;

  // 使用 shuffle() 函数随机打乱容器中的元素的顺序
  std::shuffle(v.begin(), v.end(), std::default_random_engine());
  std::for_each(v.begin(), v.end(), [](int x) { std::cout << x << " "; });
  std::cout << std::endl;

  return 0;
}
```
- **生成算法**
生成算法包括：`generate()`、 `fill()`、 `remove_if()`、 `replace()` 和 `replace_if()`。
C++ 标准模板库 (STL) 包含许多用于处理容器和算法的模板。以下是一些常用的生成算法：

- **generate()** - 使用一个函数生成容器中的元素。
- **fill()** - 使用一个值填充容器中的元素。
- **transform()** - 使用一个函数将一个容器中的元素转换为另一个容器中的元素。
- **remove_copy()** - 从一个容器中删除满足指定条件的元素，并将其复制到另一个容器中。
- **remove_copy_if()** - 从一个容器中删除满足指定条件的元素，并将其复制到另一个容器中。
- **replace_copy()** - 在一个容器中将指定值替换为另一个值，并将结果复制到另一个容器中。
- **replace_copy_if()** - 在一个容器中将满足指定条件的元素替换为另一个值，并将结果复制到另一个容器中。
- **generate_n()** - 使用一个函数生成指定数量的容器元素。
以下是一个使用这些算法的示例：

```c++
#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
#include <functional>
#include <random>

int main() {
  // 使用 generate() 函数生成容器
  std::vector<int> v(5);
  std::generate(v.begin(), v.end(), [](){ return std::rand() % 10; });
  std::cout << "Generated vector: ";
  std::for_each(v.begin(), v.end(), [](int x) { std::cout << x << " "; });
  std::cout << std::endl;

  // 使用 fill() 函数将容器填充为一个值
  std::fill(v.begin(), v.end(), 10);
  std::cout << "Filled vector: ";
  std::for_each(v.begin(), v.end(), [](int x) { std::cout << x << " "; });
  std::cout << std::endl;

  // 使用 transform() 函数将一个容器中的值转换为另一个容器中的值
  std::vector<double> v1 = {1.0, 2.0, 3.0, 4.0, 5.0};
  std::vector<int> v2(5);
  std::transform(v1.begin(), v1.end(), v2.begin(), [](double x) { return x * 2; });
  std::cout << "Transformed vector: ";
  std::for_each(v2.begin(), v2.end(), [](int x) { std::cout << x << " "; });
  std::cout << std::endl;

  // 使用 remove_copy() 函数删除一个容器中满足条件的元素
  std::vector<int> v3 = {1, 2, 3, 4, 5, 4, 3, 2, 1};
  std::vector<int> v4(v3.size());
  std::remove_copy(v3.begin(), v3.end(), v4.begin(), 4);
  std::cout << "Vector after removing 4s: ";
  std::for_each(v4.begin(), v4.end(), [](int x) { std::cout << x << " "; });
  std::cout << std::endl;

  // 使用 remove_copy_if() 函数删除一个容器中满足条件的元素
  std::vector<int> v5 = {1, 2, 3, 4, 5, 4, 3, 2, 1};
  std::vector<int> v6(v5.size());
  std::remove_copy_if(v5.begin(), v5.end(), v6.begin(), [](int x) { return x % 2 == 0; });
  std::cout << "Vector after removing even numbers: ";
  std::for_each(v6.begin(), v6.end(), [](int x) { std::cout << x << " "; });
  std::cout << std::endl;

  // 使用 replace_copy() 函数将一个容器中满足条件的元素替换为另一个值
  std::vector<int> v7 = {1, 2, 3, 4, 5, 4, 3, 2, 1};
  std::vector<int> v8(v7.size());
  std::replace_copy(v7.begin(), v7.end(), v8.begin(), 4, 10);
  std::cout << "Vector after replacing 4s with 10: ";
  std::for_each(v8.begin(), v8.end(), [](int x) { std::cout << x << " "; });
  std::cout << std::endl;

  // 使用 replace_copy_if() 函数将一个容器中满足条件的元素替换为另一个值
  std::vector<int> v9 = {1, 2, 3, 4, 5, 4, 3, 2, 1};
  std::vector<int> v10(v9.size());
  std::replace_copy_if(v9.begin(), v9.end(), v10.begin(), [](int x) { return x % 2 == 0; }, 10);
  std::cout << "Vector after replacing even numbers with 10: ";
  std::for_each(v10.begin(), v10.end(), [](int x) { std::cout << x << " "; });
  std::cout << std::endl;

  // 使用 generate_n() 函数生成指定数量的容器元素
  std::vector<int> v11(5);
  std::generate_n(v11.begin(), 5, [](){ return std::rand() % 10; });
  std::cout << "Generated 5 random numbers: ";
  std::for_each(v11.begin(), v11.end(), [](int x) { std::cout << x << " "; });
  std::cout << std::endl;

  return 0;
}
```
- **分区算法**
分区算法包括：`partition()`、 `stable_partition()` 和 `partition_copy()`。
C++ 标准模板库 (STL) 包含许多用于处理容器和算法的模板。以下是一些常用的分区算法：

- **partition()** - 将容器中满足指定条件的元素分隔开来，并将其放入两个不同容器中。
- **stable_partition()** - 将容器中满足指定条件的元素分隔开来，并将其放入两个不同容器中，但要保证分隔后的两个容器中元素的相对顺序不变。
- **partition_copy()** - 将一个容器中满足指定条件的元素复制到两个不同容器中。
- **partition_point()** - 返回容器中第一个不满足指定条件的元素的迭代器。

以下是一个使用这些算法的示例：

```c++
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
  std::vector<int> v = {1, 2, 3, 4, 5};

  // 使用 partition() 函数将容器中值小于 3 的元素分隔开来
  std::vector<int> v1, v2;
  std::partition(v.begin(), v.end(), [](int x) { return x < 3; });
  std::copy(v.begin(), v.begin() + 3, std::back_inserter(v1));
  std::copy(v.begin() + 3, v.end(), std::back_inserter(v2));
  std::cout << "Vector 1: ";
  std::for_each(v1.begin(), v1.end(), [](int x) { std::cout << x << " "; });
  std::cout << std::endl;
  std::cout << "Vector 2: ";
  std::for_each(v2.begin(), v2.end(), [](int x) { std::cout << x << " "; });
  std::cout << std::endl;

  // 使用 stable_partition() 函数将容器中值小于 3 的元素分隔开来，并保持相对顺序不变
  std::vector<int> v3, v4;
  std::stable_partition(v.begin(), v.end(), [](int x) { return x < 3; });
  std::copy(v.begin(), v.begin() + 3, std::back_inserter(v3));
  std::copy(v.begin() + 3, v.end(), std::back_inserter(v4));
  std::cout << "Vector 3: ";
  std::for_each(v3.begin(), v3.end(), [](int x) { std::cout << x << " "; });
  std::cout << std::endl;
  std::cout << "Vector 4: ";
  std::for_each(v4.begin(), v4.end(), [](int x) { std::cout << x << " "; });
  std::cout << std::endl;

  // 使用 partition_copy() 函数将容器中值小于 3 的元素复制到两个不同容器中
  std::vector<int> v5, v6;
  std::partition_copy(v.begin(), v.end(), std::back_inserter(v5), std::back_inserter(v6), [](int x) { return x < 3; });
  std::cout << "Vector 5: ";
  std::for_each(v5.begin(), v5.end(), [](int x) { std::cout << x << " "; });
  std::cout << std::endl;
  std::cout << "Vector 6: ";
  std::for_each(v6.begin(), v6.end(), [](int x) { std::cout << x << " "; });
  std::cout << std::endl;

  // 使用 partition_point() 函数返回容器中第一个不满足指定条件的元素的迭代器
  auto it = std::partition_point(v.begin(), v.end(), [](int x) { return x % 2 == 0; });
  std::cout << "Partition point: " << *it << std::endl;

  return 0;
}
```
- **相等算法**
相等算法包括：`equal()`、 `mismatch()` 和 `is_permutation()`。
C++ 标准模板库 (STL) 包含许多用于处理容器和算法的模板。以下是一些常用的相等算法：

- **equal()** - 判断两个容器是否相等。
- **equal_range()** - 判断两个容器是否相等，并返回一个pair，其中first是第一个不相等的元素的迭代器，second是第二个不相等的元素的迭代器。
- **mismatch()** - 比较两个容器中元素的相等性，并返回一个pair，其中first是第一个不相等的元素的迭代器，second是第二个容器的相应元素。
- **is_permutation()** - 判断两个容器是否是排列的对。

以下是一个使用这些算法的示例：

```c++
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
  std::vector<int> v1 = {1, 2, 3, 4, 5};
  std::vector<int> v2 = {1, 2, 3, 4, 5};

  // 使用 equal() 函数判断两个容器是否相等
  if (std::equal(v1.begin(), v1.end(), v2.begin())) {
    std::cout << "Vectors are equal" << std::endl;
  } else {
    std::cout << "Vectors are not equal" << std::endl;
  }

  // 使用 equal_range() 函数判断两个容器是否相等，并返回一个pair
  std::pair<std::vector<int>::iterator, std::vector<int>::iterator> range =
      std::equal_range(v1.begin(), v1.end(), v2.begin());
  if (range.first == range.second) {
    std::cout << "Vectors are equal" << std::endl;
  } else {
    std::cout << "Vectors are not equal" << std::endl;
  }

  // 使用 mismatch() 函数比较两个容器中元素的相等性，并返回一个pair
  std::pair<std::vector<int>::iterator, std::vector<int>::iterator> mismatch_range =
      std::mismatch(v1.begin(), v1.end(), v2.begin());
  if (mismatch_range.first == v1.end()) {
    std::cout << "Vectors are equal" << std::endl;
  } else {
    std::cout << "First non-equal element: " << *mismatch_range.first << std::endl;
  }

  // 使用 is_permutation() 函数判断两个容器是否是排列的对
  std::vector<int> v3 = {1, 2, 3};
  std::vector<int> v4 = {2, 3, 1};
  if (std::is_permutation(v3.begin(), v3.end(), v4.begin())) {
    std::cout << "Vectors are a permutation" << std::endl;
  } else {
    std::cout << "Vectors are not a permutation" << std::endl;
  }

  return 0;
}
```
- **数学算法**
数学算法包括：`accumulate()`、 `inner_product()`、 `adjacent_difference()` 和 `reduce()`。
C++ 标准模板库 (STL) 包含许多用于处理容器和算法的模板。以下是一些常用的数学算法：

- **accumulate()** - 对容器中的元素进行累加。
- **inner_product()** - 计算两个容器中对应元素的内积。
- **partial_sum()** - 对容器中的连续子序列进行累加。
- **adjacent_difference()** - 对容器中的相邻元素进行差值。
- **reduce()** - 对容器中的元素进行reduce操作。
- **transform()** - 使用一个函数将一个容器中的元素转换为另一个容器中的元素。
- **for_each()** - 对容器中的每个元素执行一个函数。

以下是一个使用这些算法的示例：

```c++
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
  std::vector<int> v = {1, 2, 3, 4, 5};

  // 使用 accumulate() 函数计算容器中所有元素的和
  int sum = std::accumulate(v.begin(), v.end(), 0);
  std::cout << "Sum of all elements: " << sum << std::endl;

  // 使用 inner_product() 函数计算两个容器中对应元素的内积
  int product = std::inner_product(v.begin(), v.end(), v.begin(), 1);
  std::cout << "Product of all elements: " << product << std::endl;

  // 使用 partial_sum() 函数对容器中的连续子序列进行累加
  std::vector<int> v1(v.size());
  std::partial_sum(v.begin(), v.end(), v1.begin());
  std::cout << "Partial sum of vector: ";
  std::for_each(v1.begin(), v1.end(), [](int x) { std::cout << x << " "; });
  std::cout << std::endl;

  // 使用 adjacent_difference() 函数对容器中的相邻元素进行差值
  std::vector<int> v2(v.size());
  std::adjacent_difference(v.begin(), v.end(), v2.begin());
  std::cout << "Adjacent difference of vector: ";
  std::for_each(v2.begin(), v2.end(), [](int x) { std::cout << x << " "; });
  std::cout << std::endl;

  // 使用 reduce() 函数对容器中的元素进行reduce操作
  int result = std::reduce(v.begin(), v.end(), 1, std::multiplies<int>());
  std::cout << "Result of reduce operation: " << result << std::endl;

  // 使用 transform() 函数将一个容器中的值转换为另一个容器中的值
  std::vector<double> v3 = {1.0, 2.0, 3.0, 4.0, 5.0};
  std::vector<int> v4(v3.size());
  std::transform(v3.begin(), v3.end(), v4.begin(), [](double x) { return x * 2; });
  std::cout << "Transformed vector: ";
  std::for_each(v4.begin(), v4.end(), [](int x) { std::cout << x << " "; });
  std::cout << std::endl;

  return 0;
}
```
- **集合算法**
集合算法包括：`set_intersection()`、 `set_union()`、 `set_difference()`、 `set_symmetric_difference()` 和 `includes()`。
```
#include <iostream>
#include <set>
#include <algorithm>

int main() {
  std::set<int> s1 {1, 2, 3, 4, 5};
  std::set<int> s2 {3, 4, 5, 6, 7};

  // 计算交集
  std::set<int> s3 = std::set_intersection(s1, s2);
  for (int x : s3) {
    std::cout << x << " ";
  }
  std::cout << "\n";

  // 计算并集
  std::set<int> s4 = std::set_union(s1, s2);
  for (int x : s4) {
    std::cout << x << " ";
  }
  std::cout << "\n";

  // 计算差集
  std::set<int> s5 = std::set_difference(s1, s2);
  for (int x : s5) {
    std::cout << x << " ";
  }
  std::cout << "\n";

  // 计算对称差集
  std::set<int> s6 = std::set_symmetric_difference(s1, s2);
  for (int x : s6) {
    std::cout << x << " ";
  }
  std::cout << "\n";

  // 判断一个元素是否在集合中
  std::cout << std::boolalpha;
  std::cout << std::includes(s1.begin(), s1.end(), 3) << "\n";
  std::cout << std::includes(s2.begin(), s2.end(), 3) << "\n";

  return 0;
}
- **位运算算法**
位运算算法包括：`bit_set()`、 `bit_test()`、 `bit_count()`、 `bit_reverse()` 和 `bit_fill()`。
```c++
#include <iostream>
#include <bitset>

int main() {
  std::bitset<4> b1(0b0010);
  std::bitset<4> b2(0b0101);

  // 位运算：或
  std::bitset<4> b3 = b1 | b2;
  std::cout << b3 << std::endl;

  // 位运算：与
  std::bitset<4> b4 = b1 & b2;
  std::cout << b4 << std::endl;

  // 位运算：异或
  std::bitset<4> b5 = b1 ^ b2;
  std::cout << b5 << std::endl;

  // 位运算：反转
  std::bitset<4> b6 = b5.flip();
  std::cout << b6 << std::endl;

  // 位运算：左移
  std::bitset<4> b7 = b6 << 2;
  std::cout << b7 << std::endl;

  // 位运算：右移
  std::bitset<4> b8 = b7 >> 2;
  std::cout << b8 << std::endl;

  return 0;
}
```

- **随机算法**
随机算法包括：`random_shuffle()`、 `sample()`、 `shuffle()` 和 `is_sorted()`。
```c++
#include <iostream>
#include <algorithm>
#include <vector>
#include <ctime>
#include <cstdlib>

int main() {
  std::vector<int> v{3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};

  // 使用随机数生成器对vector进行随机打乱
  std::random_shuffle(v.begin(), v.end());
  for (int x : v) {
    std::cout << x << " ";
  }
  std::cout << std::endl;

  // 随机选择3个元素并打印
  std::srand(static_cast<unsigned>(time(0)));
  std::vector<int>::iterator it = v.begin();
  std::advance(it, std::rand() % v.size());
  std::advance(it, 1);
  std::advance(it, 1);
  std::cout << *it << " " << *(it + 1) << " " << *(it + 2) << std::endl;

  // 使用随机数生成器对vector进行随机采样
  std::vector<int> v2(v.begin(), v.begin() + 3);
  std::sample(v.begin(), v.end(), v2.begin(), 3, std::rand);
  for (int x : v2) {
    std::cout << x << " ";
  }
  std::cout << std::endl;

  // 使用随机数生成器对vector进行随机打乱
  std::shuffle(v.begin(), v.end(), std::rand);
  for (int x : v) {
    std::cout << x << " ";
  }
  std::cout << std::endl;

  // 判断vector是否已经排序
  std::cout << std::boolalpha;
  std::cout << std::is_sorted(v.begin(), v.end()) << std::endl;

  return 0;
}
```
- **字符串算法**
字符串算法包括：`find()`、 `rfind()`、 `find_first_of()`、 `find_last_of()`、 `compare()`、 `replace()`、 `substr()`、 `to_lower()`、 `to_upper()`、 `to_string()` 和 `to_wstring()`。
```c++
#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string s1 = "hello world";
  std::string s2 = "world";

  // 查找子串的位置
  std::string::size_type pos = s1.find(s2);
  if (pos!= std::string::npos) {
    std::cout << "s2在s1中出现的位置是：" << pos << std::endl;
  } else {
    std::cout << "s2不在s1中" << std::endl;
  }

  // 查找子串的最后一次出现的位置
  pos = s1.rfind(s2);
  if (pos!= std::string::npos) {
    std::cout << "s2在s1中最后一次出现的位置是：" << pos << std::endl;
  } else {
    std::cout << "s2不在s1中" << std::endl;
  }

  // 查找s1中任意一个字符在s2中出现的位置
  std::string::size_type pos1 = s1.find_first_of("aeiou");
  if (pos1!= std::string::npos) {
    std::cout << "s1中任意一个字符在s2中出现的位置是：" << pos1 << std::endl;
  } else {
    std::cout << "s1中没有在s2中出现的字符" << std::endl;
  }

  // 比较两个字符串
  int cmp = s1.compare(s2);
  if (cmp < 0) {
    std::cout << s1 << "小于" << s2 << std::endl;
  } else if (cmp == 0) {
    std::cout << s1 << "等于" << s2 << std::endl;
  } else {
    std::cout << s1 << "大于" << s2 << std::endl;
  }

  // 替换字符串
  std::string s3 = s1.replace(3, 5, "C++");
  std::cout << s3 << std::endl;

  // 截取字符串
  std::string s4 = s3.substr(6);
  std::cout << s4 << std::endl;

  // 转换为小写
  std::string s5 = s4.to_lower();
  std::cout << s5 << std::endl;

  // 转换为大写
  std::string s6 = s5.to_upper();
  std::cout << s6 << std::endl;

  // 转换为字符串
  int n = 10;
  std::string s7 = std::to_string(n);
  std::cout << s7 << std::endl;

  // 转换为宽字符串
  std::wstring s8 = s6.to_wstring();
  std::wcout << s8 << std::endl;

  return 0;
}
```
- **I/O算法**
I/O算法包括：`istream_iterator` 和 `ostream_iterator`。
#include <iostream>
#include <algorithm>
#include <iterator>
#include <vector>
#include <string>
int main() {
    std::vector<int> nums = {1, 2, 3, 4, 5};
    std::ostream_iterator<int> output(std::cout, " "); // 创建一个ostream_iterator对象，绑定到cout，元素之间用空格分隔
    std::copy(nums.begin(), nums.end(), output); // 将nums中的元素逐个输出到cout
    std::cout << std::endl; // 换行

    return 0;
}

