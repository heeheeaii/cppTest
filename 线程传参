在C++中，你可以使用`std::thread`的构造函数来向线程传递参数。这里有一个示例：

    #include <iostream>
    #include <thread>
    
    // 定义一个被线程调用的函数
    void threadFunc(int arg1, double arg2, std::string arg3)
    {
        std::cout << "arg1: " << arg1 << ", arg2: " << arg2 << ", arg3: " << arg3 << std::endl;
    }
    
    int main()
    {
        // 创建一个线程，并传递参数
        std::thread t(threadFunc, 1, 3.14, "Hello, World!");
    
        // 等待线程结束
        t.join();
    
        return 0;
    }
    

在这个例子中，我们定义了一个函数`threadFunc`，它接受三个参数。然后我们在`main`函数中创建了一个线程，并将这三个参数传递给了`threadFunc`。

但是，如果你的函数不接受参数，或者你想要传递的参数数量不确定，你可以使用`std::ref`或`std::cref`来传递引用。例如：

    #include <iostream>
    #include <thread>
    
    // 定义一个被线程调用的函数
    void threadFunc(int &arg1, double &arg2, std::string &arg3)
    {
        std::cout << "arg1: " << arg1 << ", arg2: " << arg2 << ", arg3: " << arg3 << std::endl;
    }
    
    int main()
    {
        int arg1 = 1;
        double arg2 = 3.14;
        std::string arg3 = "Hello, World!";
    
        // 创建一个线程，并传递参数引用
        std::thread t(threadFunc, std::ref(arg1), std::ref(arg2), std::ref(arg3));
    
        // 等待线程结束
        t.join();
    
        return 0;
    }
    

在这个例子中，我们使用`std::ref`来传递变量的引用，这样我们就可以在`threadFunc`中修改这些变量的值。
`std::ref` 和 `std::cref` 是 C++11 引入的，用于在 std::bind 或者 std::async 中引用成员函数或者非成员函数。这些函数主要在多线程中使用，目的是在函数调用中保持对象的引用，而不是复制对象。

1.  `std::ref`:  
    `std::ref` 用于在函数绑定或异步函数调用中引用非const对象。这实际上允许你通过引用而不是值来传递对象。例如，在多线程中，如果你想在另一个线程中调用一个对象的成员函数，并且这个对象不是常量的，你可以使用 `std::ref` 来传递这个对象的引用。
    
    示例：
    
        std::thread t(func, std::ref(myObj));
        
    
2.  `std::cref`:  
    `std::cref` 类似于 `std::ref`，但它是用于引用const对象的。这意味着你将通过const引用传递对象，你不能在被调用的函数中修改这个对象。这在你希望保证对象不会被改变时很有用。
    
    示例：
    
        std::thread t(func, std::cref(myObj));
        
    

这两个函数都定义在 `<functional>` 头文件中，因此在使用它们之前，你必须包含这个头文件。它们实际上返回一个 `reference_wrapper` 对象，你可以将这个对象传递给 std::bind 或 std::async，或者在其他需要函数调用的地方使用。
