
#include <mutex>
#include <condition_variable>
#include <thread>
#include <vector>
#include <iostream>
#include <semaphore.h>

std::mutex mtx;
sem_t sem;
int counter = 0;

void increment_counter(int id) {
    sem_wait(&sem);
    std::lock_guard<std::mutex> lock(mtx);
    std::this_thread::sleep_for(std::chrono::milliseconds(100));
    counter++;
    std::cout << "Thread " << id << " incremented counter to " << counter << std::endl;
    sem_post(&sem);
}

void read_counter(int id) {
    sem_wait(&sem);
    std::lock_guard<std::mutex> lock(mtx);
    std::this_thread::sleep_for(std::chrono::milliseconds(100));
    std::cout << "Thread " << id << " read counter value " << counter << std::endl;
    sem_post(&sem);
}

int main() {
    sem_init(&sem, 0, 5);

    std::vector<std::thread> threads;
    for (int i = 0; i < 10; ++i) {
        if (i % 2 == 0) {
            threads.push_back(std::thread(increment_counter, i));
        } else {
            threads.push_back(std::thread(read_counter, i));
        }
    }

    for (auto &thread: threads) {
        thread.join();
    }

    sem_destroy(&sem);

    return 0;
}
