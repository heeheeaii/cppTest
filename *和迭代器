*运算符在C++中有两个主要的用途：
 1. 解引用指针：当*运算符用于指针时，它被称为解引用运算符。它用于访问指针所指向的值。例如：
int a = 5;
int *p = &a;
std::cout << *p << std::endl;  // 输出5

在这个例子中，*p用于访问指针p所指向的整数值。
 2. 获取迭代器所指向的元素：当*运算符用于迭代器时，它用于获取迭代器所指向的元素。例如：
std::vector<int> v = {1, 2, 3, 4, 5};
std::vector<int>::iterator it = v.begin();
std::cout << *it << std::endl;  // 输出1

在这个例子中，*it用于获取迭代器it所指向的元素。
在我们的示例中，it是一个std::sregex_iterator，它是一种迭代器，用于遍历正则表达式匹配的结果。当我们使用*运算符来解引用it时，我们实际上是获取了迭代器所指向的std::match_results<>对象。
*运算符在C++中有两个主要的用途：
 1. 解引用指针：当*运算符用于指针时，它被称为解引用运算符。它用于访问指针所指向的值。例如：
int a = 5;
int *p = &a;
std::cout << *p << std::endl;  // 输出5

在这个例子中，*p用于访问指针p所指向的整数值。
 2. 获取迭代器所指向的元素：当*运算符用于迭代器时，它用于获取迭代器所指向的元素。例如：
std::vector<int> v = {1, 2, 3, 4, 5};
std::vector<int>::iterator it = v.begin();
std::cout << *it << std::endl;  // 输出1

在这个例子中，*it用于获取迭代器it所指向的元素。
在我们的示例中，it是一个std::sregex_iterator，它是一种迭代器，用于遍历正则表达式匹配的结果。当我们使用*运算符来解引用it时，我们实际上是获取了迭代器所指向的std::match_results<>对象。
